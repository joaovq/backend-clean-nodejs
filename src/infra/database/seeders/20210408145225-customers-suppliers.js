'use strict'
const faker = require('faker')
const fakerBr = require('faker-br')

const phoneFormat = '###########'

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.bulkInsert('customerssuppliers',
      [{
        id: 1,
        name: faker.name.findName().toUpperCase(),
        email: faker.internet.email(),
        profile: 'CLIENTE/FORNECEDOR',
        type: 'FÍSICO',
        class: 'CLIENTE',
        cellphone1: faker.phone.phoneNumber(phoneFormat),
        cellphone2: faker.phone.phoneNumber(phoneFormat),
        phone1: faker.phone.phoneNumber(phoneFormat),
        phone2: faker.phone.phoneNumber(phoneFormat),
        website: faker.internet.url(),
        birthdate: '1990-01-01',
        cpfCnpj: fakerBr.br.cpf(),
        identityCard: fakerBr.br.rg(),
        postcode: faker.address.zipCodeByState('MG').replace('-', ''),
        address1: faker.address.streetName().toUpperCase(),
        stateId: 1,
        cityId: 1,
        neighborhood: faker.address.streetSuffix().toUpperCase(),
        addressNumber: '21B',
        bankId: 1,
        bankBranch: '1111',
        bankAccount: '1111111',
        bankAccountType: 'CORRENTE',
        createdAt: new Date(),
        updatedAt: new Date(),
        createrId: 1,
        officeId: 1
      }, {
        id: 2,
        name: faker.name.findName().toUpperCase(),
        email: faker.internet.email(),
        profile: 'CLIENTE/FORNECEDOR',
        type: 'JURÍDICO',
        class: 'FORNECEDOR',
        cellphone1: faker.phone.phoneNumber(phoneFormat),
        cellphone2: faker.phone.phoneNumber(phoneFormat),
        phone1: faker.phone.phoneNumber(phoneFormat),
        phone2: faker.phone.phoneNumber(phoneFormat),
        website: faker.internet.url(),
        birthdate: '1990-01-01',
        cpfCnpj: fakerBr.br.cnpj(),
        identityCard: fakerBr.br.rg(),
        postcode: faker.address.zipCodeByState('MG').replace('-', ''),
        address1: faker.address.streetName().toUpperCase(),
        stateId: 1,
        cityId: 1,
        neighborhood: faker.address.streetSuffix().toUpperCase(),
        addressNumber: '21B',
        bankId: 1,
        bankBranch: '1111',
        bankAccount: '1111111',
        bankAccountType: 'CORRENTE',
        createdAt: new Date(),
        updatedAt: new Date(),
        createrId: 1,
        officeId: 1
      }, {
        id: 3,
        name: faker.name.findName().toUpperCase(),
        email: faker.internet.email(),
        profile: 'CLIENTE/FORNECEDOR',
        type: 'JURÍDICO',
        class: 'AMBOS',
        cellphone1: faker.phone.phoneNumber(phoneFormat),
        cellphone2: faker.phone.phoneNumber(phoneFormat),
        phone1: faker.phone.phoneNumber(phoneFormat),
        phone2: faker.phone.phoneNumber(phoneFormat),
        website: faker.internet.url(),
        birthdate: '1990-01-01',
        cpfCnpj: fakerBr.br.cnpj(),
        identityCard: fakerBr.br.rg(),
        postcode: faker.address.zipCodeByState('MG').replace('-', ''),
        address1: faker.address.streetName().toUpperCase(),
        stateId: 1,
        cityId: 1,
        neighborhood: faker.address.streetSuffix().toUpperCase(),
        addressNumber: '21B',
        bankId: 1,
        bankBranch: '1111',
        bankAccount: '1111111',
        bankAccountType: 'CORRENTE',
        createdAt: new Date(),
        updatedAt: new Date(),
        createrId: 1,
        officeId: 1
      }], {})
  },
  down: (queryInterface) => queryInterface.bulkDelete('customerssuppliers', null, {}),
}
